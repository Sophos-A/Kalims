require('dotenv').config();
const db = require('../config/db');

async function checkVulnerabilityTables() {
  try {
    console.log('=== Vulnerability Tables Schema ===');
    
    // Check patient_vulnerabilities table
    const pvTableExists = await db.query(`
      SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_schema = 'public' 
        AND table_name = 'patient_vulnerabilities'
      )
    `);
    
    if (pvTableExists.rows[0].exists) {
      console.log('Patient vulnerabilities table exists.');
      
      // Get table schema
      const pvSchemaResult = await db.query(`
        SELECT column_name, data_type, is_nullable
        FROM information_schema.columns
        WHERE table_name = 'patient_vulnerabilities'
        ORDER BY ordinal_position
      `);
      
      console.log('\nPatient vulnerabilities table columns:');
      console.table(pvSchemaResult.rows);
      
      // Check row count
      const pvCountResult = await db.query('SELECT COUNT(*) as count FROM patient_vulnerabilities');
      console.log(`\nTotal patient vulnerabilities: ${pvCountResult.rows[0].count}`);
    } else {
      console.log('Patient vulnerabilities table does not exist.');
    }
    
    // Check vulnerability_factors table
    const vfTableExists = await db.query(`
      SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_schema = 'public' 
        AND table_name = 'vulnerability_factors'
      )
    `);
    
    if (vfTableExists.rows[0].exists) {
      console.log('\nVulnerability factors table exists.');
      
      // Get table schema
      const vfSchemaResult = await db.query(`
        SELECT column_name, data_type, is_nullable
        FROM information_schema.columns
        WHERE table_name = 'vulnerability_factors'
        ORDER BY ordinal_position
      `);
      
      console.log('\nVulnerability factors table columns:');
      console.table(vfSchemaResult.rows);
      
      // Check row count
      const vfCountResult = await db.query('SELECT COUNT(*) as count FROM vulnerability_factors');
      console.log(`\nTotal vulnerability factors: ${vfCountResult.rows[0].count}`);
    } else {
      console.log('\nVulnerability factors table does not exist.');
    }
    
    // Check patient_categories table
    const pcTableExists = await db.query(`
      SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_schema = 'public' 
        AND table_name = 'patient_categories'
      )
    `);
    
    if (pcTableExists.rows[0].exists) {
      console.log('\nPatient categories table exists.');
      
      // Get table schema
      const pcSchemaResult = await db.query(`
        SELECT column_name, data_type, is_nullable
        FROM information_schema.columns
        WHERE table_name = 'patient_categories'
        ORDER BY ordinal_position
      `);
      
      console.log('\nPatient categories table columns:');
      console.table(pcSchemaResult.rows);
      
      // Check row count
      const pcCountResult = await db.query('SELECT COUNT(*) as count FROM patient_categories');
      console.log(`\nTotal patient categories: ${pcCountResult.rows[0].count}`);
    } else {
      console.log('\nPatient categories table does not exist.');
    }
    
    process.exit(0);
  } catch (error) {
    console.error('Error checking vulnerability tables:', error);
    process.exit(1);
  }
}

checkVulnerabilityTables();
